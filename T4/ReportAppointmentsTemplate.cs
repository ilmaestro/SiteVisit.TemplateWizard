// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace OnSite.TemplateWizard.Classes
{
    using System;
    using System.Data;
    using System.Data.Objects;
    using System.Linq;
    using System.IO;
    using System.Collections.Generic;
    using System.Data.Objects.DataClasses;
    using System.Text.RegularExpressions;
    using System.Xml;
    using System.Xml.Linq;
    using System.Text;
    using OnSite.TemplateWizard.Classes;
    using OnSite.TemplateWizard.Models;
    using System.Data.EntityClient;
    
    
    #line 1 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class ReportAppointmentsTemplate : ReportAppointmentsTemplateBase
    {
        public virtual string TransformText()
        {
            
            #line 2 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"

switch (OutputType) {
	case FileType.Page:
		GeneratePage(SiteVisit, SiteVisit.SiteVisitForms);
		break;
	case FileType.Code:
		GenerateCodeFile(SiteVisit, SiteVisit.SiteVisitForms);
		break;
	case FileType.Designer:
		GenerateDesignerFile(SiteVisit, SiteVisit.SiteVisitForms);
		break;
	default:
		break;
}

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 16 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"

    void GeneratePage(SiteVisit sitevisit, IEnumerable<SiteVisitForm> forms)
    {
		string sitevisitName = sitevisit.SiteVisitName.Replace(" ", "");
		var parentForm = SiteVisitDBHelper.GetParentForm(sitevisit);
		string table = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBTableName;
        string pkey = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBPrimaryKeyName;
		SiteVisitFormField reportViewerFilterField = SiteVisitDBHelper.GetSiteVisitReportViewerFilterField(parentForm);
		string reportViewerFilterExpression = "", whereParameters = "";
		if (reportViewerFilterField != null)
		{
			reportViewerFilterExpression = "AND (it." + table + "." + reportViewerFilterField.FieldName + " = @ReportViewerFilterValue OR @ReportViewerFilterValue IS NULL OR @ReportViewerFilterValue = '')";
			whereParameters = @"<WhereParameters>
            <asp:ProfileParameter Name=""ReportViewerFilterValue"" PropertyName=""ReportViewerFilterValue"" Type=""String"" />
        </WhereParameters>";
		}


        
        #line default
        #line hidden
        
        #line 33 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("<%@ Page Title=\"");

        
        #line default
        #line hidden
        
        #line 33 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sitevisit.SiteVisitName));

        
        #line default
        #line hidden
        
        #line 33 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\" Language=\"C#\" MasterPageFile=\"~/Site.master\" AutoEventWireup=\"true\" CodeBehind=" +
        "\"");

        
        #line default
        #line hidden
        
        #line 33 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sitevisitName));

        
        #line default
        #line hidden
        
        #line 33 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("Appointments.aspx.cs\" Inherits=\"OnSite.WebUI.Reports.");

        
        #line default
        #line hidden
        
        #line 33 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sitevisitName));

        
        #line default
        #line hidden
        
        #line 33 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(@"Appointments"" %>
<%@ Register Assembly=""DevExpress.Web.ASPxGridView.v12.1.Export, Version=12.1.4.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a""
    Namespace=""DevExpress.Web.ASPxGridView.Export"" TagPrefix=""dx"" %>
<asp:Content ID=""Content1"" ContentPlaceHolderID=""HeadContent"" runat=""server"">
<script type=""text/javascript"" src=""https://maps.googleapis.com/maps/api/js?sensor=false&key=AIzaSyDg2r9hOucSc8Whgr-4-bfvbXBvzSEIAR0""></script>
    <script type=""text/javascript"">
        var map;
        var markersArray = [];
		var infowindowsArray = [];
        var IsMapUpating = false;
		var lastSelectedVisibleIndex = -1;

        function initialize() {
            var myLatlng = new google.maps.LatLng(45.5236, -122.6750);  
            var myOptions = {
                zoom: 12,
                center: myLatlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById('map_canvas'),
            myOptions);
            UpdateMap();
        }
        //Since the GetPageRowValues function causes a Callback on the grid, the IsMapUpdating var keeps us from updating the map in an infinite loop.
        function UpdateMap() {
            if (!IsMapUpating) {
                IsMapUpating = true;
                grid.GetPageRowValues('");

        
        #line default
        #line hidden
        
        #line 60 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(pkey));

        
        #line default
        #line hidden
        
        #line 60 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(";");

        
        #line default
        #line hidden
        
        #line 60 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 60 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(".LocationLatitude;");

        
        #line default
        #line hidden
        
        #line 60 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 60 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(@".LocationLongitude;', function (values) {
                    var bounds = new google.maps.LatLngBounds();
                    deleteOverlays();
                    for (var i = 0; i < values.length; i++) {
						if (values[i][0])
						{
							addMarker(i, values[i][0], values[i][1], values[i][2]);
							bounds.extend(new google.maps.LatLng(values[i][1], values[i][2]));
						}
                    }
                    map.fitBounds(bounds);
                    if (map.zoom > 12)
                        map.setZoom(12);
                    setTimeout(function () { IsMapUpating = false; }, 500);
                });
            }
        }

        function addMarker(index, id, latitude, longitude) {
			var contentString = """"; //'<div><a href=""../SiteVisits/VSDSchedulingEdit.aspx?ID='+ id +'"">Edit Site</a></div>';
			//loop through grid columns write content into info window
			var row = grid.GetRow(index);
			if (row != null)
			{
				var cellCounter = 0;
				for (var x = 0; x < grid.columns.length; x++)
				{
				    if (grid.columns[x].fieldName != null && grid.columns[x].fieldName != """);

        
        #line default
        #line hidden
        
        #line 87 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(pkey));

        
        #line default
        #line hidden
        
        #line 87 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\" && grid.columns[x].fieldName != \"SiteVisitAppointmentID\" && grid.columns[x].vis" +
        "ible == true && x < row.cells.length && cellCounter < 8)\r\n\t\t\t\t    {\r\n\t\t\t\t       " +
        " var actualHeaderLabel = grid.GetHeader(x).firstChild.rows[0].cells[0].innerHTML" +
        "; //don\'t ask me how long it took to figure this out. //grid.columns[x].fieldNam" +
        "e\r\n\t\t\t\t        contentString += \"<div><strong>\" + actualHeaderLabel + \"</strong>" +
        ": \" + row.cells[cellCounter].innerHTML + \"</div>\"; //\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (grid.c" +
        "olumns[x].visible == true) {\r\n\t\t\t\t\t    //only increment the cell counter for vis" +
        "ible columns\r\n\t\t\t\t\t    cellCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar infowindow = " +
        "new google.maps.InfoWindow({\r\n\t\t\t\tcontent: contentString\r\n\t\t\t});\r\n            va" +
        "r marker = new google.maps.Marker({\r\n                position: new google.maps.L" +
        "atLng(latitude, longitude),\r\n                map: map,\r\n                title: \'" +
        "Site\'\r\n            });\r\n            markersArray.push(marker);\r\n\t\t\tinfowindowsAr" +
        "ray.push(infowindow);\r\n\t\t\tgoogle.maps.event.addListener(marker, \'click\', functio" +
        "n() {\r\n\t\t\t  closeInfowindows();\r\n\t\t\t  infowindow.open(map,marker);\r\n\t\t\t  lastSel" +
        "ectedVisibleIndex = index;\r\n\t\t\t  grid.SelectRowOnPage(index);\r\n\t\t\t});\r\n        }" +
        "\r\n\r\n        // Deletes all markers in the array by removing references to them\r\n" +
        "        function deleteOverlays() {\r\n            if (markersArray) {\r\n          " +
        "      for (i in markersArray) {\r\n                    markersArray[i].setMap(null" +
        ");\r\n                }\r\n                markersArray.length = 0;\r\n            }\r\n" +
        "        }\r\n\r\n\t\tfunction closeInfowindows() {\r\n\t\t\tif (infowindowsArray) {\r\n      " +
        "          for (i in infowindowsArray) {\r\n                    infowindowsArray[i]" +
        ".close();\r\n                }\r\n            }\r\n\t\t}\r\n\r\n        function OnGridRowCl" +
        "ick(s, e) {\r\n\t\t\tcloseInfowindows();\r\n\t\t\tlastSelectedVisibleIndex = e.visibleInde" +
        "x;\r\n\t\t\tinfowindowsArray[e.visibleIndex].open(map,markersArray[e.visibleIndex])\r\n" +
        "        }\r\n\r\n        google.maps.event.addDomListener(window, \'load\', initialize" +
        ");\r\n    </script>\r\n    <style type=\"text/css\">\r\n      #map_canvas {\r\n\t\theight: 3" +
        "00px;\r\n\t\twidth: 100%;\r\n\t  }\r\n    </style>\r\n</asp:Content>\r\n<asp:Content ID=\"Cont" +
        "ent2\" ContentPlaceHolderID=\"MainContent\" runat=\"server\">\r\n\t<h2>Appointments</h2>" +
        "\r\n\t<div id=\"map_canvas\"></div>\r\n\t<br /> <br />\r\n\t<dx:ASPxButton ID=\"btnCsvExport" +
        "\" runat=\"server\" Text=\"Export to Csv\" UseSubmitBehavior=\"False\" />\r\n    <div sty" +
        "le=\"margin-top: 5px; margin-bottom: 5px;\">\r\n    <dx:ASPxGridView ID=\"grid\" runat" +
        "=\"server\" AutoGenerateColumns=\"False\" ClientInstanceName=\"grid\" \r\n        DataSo" +
        "urceID=\"AppointmentsDataSource\" KeyFieldName=\"");

        
        #line default
        #line hidden
        
        #line 157 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 157 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("AppointmentID\">\r\n        <Columns>\r\n            <dx:GridViewDataTextColumn FieldN" +
        "ame=\"");

        
        #line default
        #line hidden
        
        #line 159 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(pkey));

        
        #line default
        #line hidden
        
        #line 159 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\" Caption=\"Contact ID\" ReadOnly=\"True\" Visible=\"true\"\r\n                VisibleInd" +
        "ex=\"0\">\r\n            </dx:GridViewDataTextColumn>\r\n            <dx:GridViewDataT" +
        "extColumn FieldName=\"SiteVisitAppointmentID\" Caption=\"Appointment ID\" ReadOnly=\"" +
        "True\" Visible=\"True\"\r\n                VisibleIndex=\"0\">\r\n            </dx:GridVi" +
        "ewDataTextColumn>\r\n            <dx:GridViewDataTextColumn FieldName=\"SiteVisitAp" +
        "pointment.SiteVisitID\" VisibleIndex=\"1\" Visible=\"false\">\r\n            </dx:GridV" +
        "iewDataTextColumn>\r\n            <dx:GridViewDataTextColumn FieldName=\"SiteVisitA" +
        "ppointment.ResourceID\" VisibleIndex=\"2\">\r\n            </dx:GridViewDataTextColum" +
        "n>\r\n            <dx:GridViewDataTextColumn FieldName=\"SiteVisitAppointment.Type\"" +
        " VisibleIndex=\"3\" Visible=\"false\">\r\n            </dx:GridViewDataTextColumn>\r\n  " +
        "          <dx:GridViewDataTextColumn FieldName=\"SiteVisitAppointment.Subject\" Vi" +
        "sibleIndex=\"4\" Visible=\"false\">\r\n            </dx:GridViewDataTextColumn>\r\n     " +
        "       <dx:GridViewDataTextColumn FieldName=\"SiteVisitAppointment.Description\" V" +
        "isibleIndex=\"5\" Visible=\"false\">\r\n            </dx:GridViewDataTextColumn>\r\n    " +
        "        <dx:GridViewDataTextColumn FieldName=\"SiteVisitAppointment.AppointmentLo" +
        "cation\" VisibleIndex=\"6\">\r\n            </dx:GridViewDataTextColumn>\r\n           " +
        " <dx:GridViewDataTextColumn FieldName=\"SiteVisitAppointment.AppointmentStartDate" +
        "\" VisibleIndex=\"7\">\r\n            </dx:GridViewDataTextColumn>\r\n            <dx:G" +
        "ridViewDataTextColumn FieldName=\"SiteVisitAppointment.AppointmentEndDate\" Visibl" +
        "eIndex=\"8\">\r\n            </dx:GridViewDataTextColumn>\r\n            <dx:GridViewD" +
        "ataTextColumn FieldName=\"SiteVisitAppointment.Status\" VisibleIndex=\"10\" Visible=" +
        "\"false\">\r\n            </dx:GridViewDataTextColumn>\r\n            <dx:GridViewData" +
        "TextColumn FieldName=\"SiteVisitAppointment.Label\" VisibleIndex=\"11\" Visible=\"fal" +
        "se\">\r\n            </dx:GridViewDataTextColumn>\r\n");

        
        #line default
        #line hidden
        
        #line 185 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGridViewColumns(table, parentForm, 11)));

        
        #line default
        #line hidden
        
        #line 185 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 186 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGridViewExportColumns(table, parentForm)));

        
        #line default
        #line hidden
        
        #line 186 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\r\n\t\t\t<dx:GridViewDataTextColumn FieldName=\"");

        
        #line default
        #line hidden
        
        #line 187 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 187 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(".SchedulerNotes\" VisibleIndex=\"997\">\r\n            </dx:GridViewDataTextColumn>\r\n " +
        "           <dx:GridViewDataTextColumn FieldName=\"");

        
        #line default
        #line hidden
        
        #line 189 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 189 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(".LocationLatitude\" \r\n                ReadOnly=\"True\" VisibleIndex=\"998\" Visible=\"" +
        "True\">\r\n\t\t\t</dx:GridViewDataTextColumn>\r\n            <dx:GridViewDataTextColumn " +
        "FieldName=\"");

        
        #line default
        #line hidden
        
        #line 192 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 192 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(@".LocationLongitude"" 
                ReadOnly=""True"" VisibleIndex=""999"" Visible=""True"">
			</dx:GridViewDataTextColumn>
        </Columns>
		<Settings ShowFilterRow=""True"" />
        <SettingsBehavior AllowSelectByRowClick=""true"" AllowSelectSingleRowOnly=""true"" />
        <ClientSideEvents EndCallback=""function(s,e){UpdateMap();}"" RowClick=""OnGridRowClick"" />
    </dx:ASPxGridView>
    </div>
    <asp:EntityDataSource ID=""AppointmentsDataSource"" runat=""server"" 
        ConnectionString=""name=SiteVisitDataEntities"" 
        DefaultContainerName=""SiteVisitDataEntities"" EnableFlattening=""False"" 
        EntitySetName=""");

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("Appointments\" Include=\"");

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(table));

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(",SiteVisitAppointment,AppointmentStatus\" Where=\"it.SiteVisitAppointment.SiteVisit" +
        "ID = ");

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sitevisit.SiteVisitID));

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(reportViewerFilterExpression));

        
        #line default
        #line hidden
        
        #line 204 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\">\r\n        ");

        
        #line default
        #line hidden
        
        #line 205 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(whereParameters));

        
        #line default
        #line hidden
        
        #line 205 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\r\n    </asp:EntityDataSource>\r\n    <dx:ASPxGridViewExporter ID=\"gridExporter\" run" +
        "at=\"server\" GridViewID=\"grid\">\r\n    </dx:ASPxGridViewExporter>\r\n    <br />\r\n</as" +
        "p:Content>\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 212 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"

    }  

	private string GenerateGridViewColumns(string tableName, SiteVisitForm form, int indexSeed)
	{
		foreach(SiteVisitFormField field in SiteVisitDBHelper.GetSiteVisitSearchableFields(form)) {
			indexSeed++;

        
        #line default
        #line hidden
        
        #line 219 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\t\t\t<dx:GridViewDataTextColumn FieldName=\"");

        
        #line default
        #line hidden
        
        #line 219 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(tableName));

        
        #line default
        #line hidden
        
        #line 219 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 219 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));

        
        #line default
        #line hidden
        
        #line 219 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\" Caption=\"");

        
        #line default
        #line hidden
        
        #line 219 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldLabel));

        
        #line default
        #line hidden
        
        #line 219 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\"\r\n                ReadOnly=\"True\" VisibleIndex=\"");

        
        #line default
        #line hidden
        
        #line 220 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(indexSeed));

        
        #line default
        #line hidden
        
        #line 220 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\">\r\n            </dx:GridViewDataTextColumn>\r\n");

        
        #line default
        #line hidden
        
        #line 222 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
 
		}
		return "";
	}

	private string GenerateGridViewExportColumns(string tableName,SiteVisitForm form)
	{
		foreach(SiteVisitFormField field in SiteVisitDBHelper.GetSiteVisitExportFields(form)) {
			string output = "";
			//checkbox columns
			if (field.ControlType.ControlTypeID == 1)
			{
				foreach(SiteVisitFormFieldItem item in field.SiteVisitFormFieldItems)
				{
					output += "\t\t\t<dx:GridViewDataTextColumn FieldName=\"" + tableName +"."+ field.FieldName +"_"+item.ListItemValue +"\" Caption=\""+item.ListItemLabel+"\" ReadOnly=\"True\" VisibleIndex=\""+ field.FieldTabIndex +"\" Visible=\"False\">\r\n\t\t\t</dx:GridViewDataTextColumn>\r\n";
				}
			}
			else 
			{
				output = "<dx:GridViewDataTextColumn FieldName=\"" + tableName +"."+ field.FieldName +"\" ReadOnly=\"True\" VisibleIndex=\""+ field.FieldTabIndex +"\" Visible=\"False\">\r\n\t\t\t</dx:GridViewDataTextColumn>";
			}


        
        #line default
        #line hidden
        
        #line 244 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\t\t\t");

        
        #line default
        #line hidden
        
        #line 244 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(output));

        
        #line default
        #line hidden
        
        #line 244 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 245 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
 
		}
		return "";
	}

    void GenerateCodeFile(SiteVisit sitevisit, IEnumerable<SiteVisitForm> forms)
    {
		string sitevisitName = sitevisit.SiteVisitName.Replace(" ", "");
		var parentForm = SiteVisitDBHelper.GetParentForm(sitevisit);
		string table = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBTableName;
        string pkey = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBPrimaryKeyName;

        
        #line default
        #line hidden
        
        #line 256 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(@"
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Web.ASPxUploadControl;
using System.IO;
using CadmusUtility;
using System.Data;
using OnSite.WebUI.Models;
using System.Web.Security;

namespace OnSite.WebUI.Reports
{
    public partial class ");

        
        #line default
        #line hidden
        
        #line 273 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sitevisitName));

        
        #line default
        #line hidden
        
        #line 273 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(@"Appointments : System.Web.UI.Page
    {
        private SiteVisitDataEntities dataCtx = new SiteVisitDataEntities();

        protected void Page_Load(object sender, EventArgs e)
        {
            btnCsvExport.Click += new EventHandler(btnCsvExport_Click);
            grid.CustomCallback += new DevExpress.Web.ASPxGridView.ASPxGridViewCustomCallbackEventHandler(grid_CustomCallback);
        }

        protected void grid_CustomCallback(object sender, DevExpress.Web.ASPxGridView.ASPxGridViewCustomCallbackEventArgs e)
        {
            grid.DataBind();
        }

        protected void btnCsvExport_Click(object sender, EventArgs e)
        {
");

        
        #line default
        #line hidden
        
        #line 290 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GenerateExportColumns(table, parentForm)));

        
        #line default
        #line hidden
        
        #line 290 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\r\n\t\t\tgrid.DataBind();\r\n\t\t\tgridExporter.FileName = \"");

        
        #line default
        #line hidden
        
        #line 292 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sitevisitName));

        
        #line default
        #line hidden
        
        #line 292 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("Appointments\";\r\n            gridExporter.WriteCsvToResponse();\r\n        }\r\n    }\r" +
        "\n}\r\n");

        
        #line default
        #line hidden
        
        #line 297 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"

    }

	private string GenerateExportColumns(string tableName, SiteVisitForm form)
	{

		foreach(SiteVisitFormField field in SiteVisitDBHelper.GetSiteVisitExportFields(form)) {
			string output = "";
			//checkbox columns
			if (field.ControlType.ControlTypeID == 1)
			{
				foreach(SiteVisitFormFieldItem item in field.SiteVisitFormFieldItems)
				{
					output += "grid.Columns[\"" + tableName +"."+ field.FieldName +"_"+item.ListItemValue +"\"].Visible = true;\r\n";
				}
			}
			else 
			{
				output = "grid.Columns[\"" + tableName +"."+ field.FieldName +"\"].Visible = true;";
			}

        
        #line default
        #line hidden
        
        #line 317 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\t\t\t");

        
        #line default
        #line hidden
        
        #line 317 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(output));

        
        #line default
        #line hidden
        
        #line 317 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 318 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
 
		}
		return "";
	}
	
	
	void GenerateDesignerFile(SiteVisit sitevisit, IEnumerable<SiteVisitForm> forms)
	{
		string sitevisitName = sitevisit.SiteVisitName.Replace(" ", "");

        
        #line default
        #line hidden
        
        #line 327 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnSite.WebUI.Reports {
    
    
    public partial class ");

        
        #line default
        #line hidden
        
        #line 340 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(sitevisitName));

        
        #line default
        #line hidden
        
        #line 340 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"
this.Write(@"Appointments {

/// <summary>
        /// btnCsvExport control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxEditors.ASPxButton btnCsvExport;
        
        /// <summary>
        /// grid control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxGridView.ASPxGridView grid;
        
        /// <summary>
        /// AppointmentsDataSource control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.EntityDataSource AppointmentsDataSource;
        
        /// <summary>
        /// gridExporter control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxGridView.Export.ASPxGridViewExporter gridExporter;        
	}
}
");

        
        #line default
        #line hidden
        
        #line 379 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\ReportAppointmentsTemplate.tt"

	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class ReportAppointmentsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
