// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace OnSite.TemplateWizard.Classes
{
    using System;
    using System.Data;
    using System.Data.Objects;
    using System.Linq;
    using System.IO;
    using System.Collections.Generic;
    using System.Data.Objects.DataClasses;
    using System.Text.RegularExpressions;
    using System.Xml;
    using System.Xml.Linq;
    using System.Text;
    using OnSite.TemplateWizard.Classes;
    using OnSite.TemplateWizard.Models;
    using System.Data.EntityClient;
    
    
    #line 1 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class DocumentsTemplate : DocumentsTemplateBase
    {
        public virtual string TransformText()
        {
            
            #line 2 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

switch (OutputType) {
	case FileType.DocPage:
		GenerateDocumentPage();
		break;
	case FileType.DocCode:
		GenerateDocumentCodeFile();
		break;
	case FileType.DocDesigner:
		GenerateDocumentDesignerFile();
		break;
	case FileType.GetPage:
		GenerateGetFilePage();
		break;
	case FileType.GetCode:
		GenerateGetFileCodeFile();
		break;
	case FileType.GetDesigner:
		GenerateGetFileDesignerFile();
		break;
	default:
		break;
}

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 25 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

    void GenerateDocumentPage()
	{

        
        #line default
        #line hidden
        
        #line 28 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"
this.Write("<%@ Page Title=\"Documents\" Language=\"C#\" MasterPageFile=\"~/Site.master\" AutoEvent" +
        "Wireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"OnSite.WebUI.Documents.Defa" +
        "ult\" %>\r\n<asp:Content ID=\"HeaderContent\" runat=\"server\" ContentPlaceHolderID=\"He" +
        "adContent\">\r\n<script type=\"text/javascript\">\r\n    // <![CDATA[\r\n    function Upl" +
        "oader_OnUploadStart() {\r\n        btnUpload.SetEnabled(false);\r\n    }\r\n    functi" +
        "on Uploader_OnFileUploadComplete(args) {\r\n        if (args.callbackData.length >" +
        " 0) {\r\n            alert(args.callbackData);\r\n        } else {\r\n            grid" +
        ".PerformCallback(uploader.GetText() + \"|\" + txtDescription.GetText());\r\n        " +
        "    txtDescription.SetValue(\'\');\r\n        }\r\n    }\r\n    function Uploader_OnFile" +
        "sUploadComplete(args) {\r\n        UpdateUploadButton();\r\n    }\r\n    function Upda" +
        "teUploadButton() {\r\n        btnUpload.SetEnabled(uploader.GetText(0) != \"\");\r\n  " +
        "  }\r\n    function OnCustomButtonClick(s, e) {\r\n        if (e.buttonID == \'Delete" +
        "\') {\r\n            e.processOnServer = confirm(\'Are you sure you want to delete t" +
        "his item?\');\r\n        } else {\r\n            e.processOnServer = true;\r\n        }" +
        "\r\n    }\r\n\r\n    function OnGridEndCallback(s, e) {\r\n        if (grid.cpErrorMessa" +
        "ge.length > 0)\r\n\t\t{\r\n            alert(grid.cpErrorMessage); \r\n\t\t\tgrid.cpErrorMe" +
        "ssage = \"\";       \r\n\t\t}\r\n    }\r\n    // ]]> \r\n</script>\r\n</asp:Content>\r\n<asp:Con" +
        "tent ID=\"BodyContent\" runat=\"server\" ContentPlaceHolderID=\"MainContent\">\r\n\t<h2>D" +
        "ocuments</h2>\r\n    <p>\r\n    <dx:ASPxPopupControl ID=\"pcUpload\" runat=\"server\" Cl" +
        "ientInstanceName=\"uploadPopup\" CloseAction=\"CloseButton\" Modal=\"True\"\r\n        P" +
        "opupHorizontalAlign=\"WindowCenter\" PopupVerticalAlign=\"WindowCenter\" HeaderText=" +
        "\"New Document\" AllowDragging=\"True\">\r\n        <ContentCollection>\r\n            <" +
        "dx:PopupControlContentControl>\r\n                <dx:ASPxUploadControl ID=\"uplFil" +
        "e\" runat=\"server\" ClientInstanceName=\"uploader\" ShowProgressPanel=\"True\"\r\n      " +
        "              NullText=\"Click here to browse files...\" Size=\"35\" OnFileUploadCom" +
        "plete=\"uploader_FileUploadComplete\">\r\n                    <ClientSideEvents File" +
        "UploadComplete=\"function(s, e) { Uploader_OnFileUploadComplete(e); }\"\r\n         " +
        "               FilesUploadComplete=\"function(s, e) { Uploader_OnFilesUploadCompl" +
        "ete(e); }\"\r\n                        FileUploadStart=\"function(s, e) { Uploader_O" +
        "nUploadStart(); }\"\r\n                        TextChanged=\"function(s, e) { Update" +
        "UploadButton(); }\"></ClientSideEvents>\r\n                    <ValidationSettings " +
        "MaxFileSize=\"20480000\">\r\n                    </ValidationSettings>\r\n            " +
        "    </dx:ASPxUploadControl>\r\n                Description:\r\n                <dx:A" +
        "SPxTextBox ID=\"mDescription\" runat=\"server\" Width=\"200px\" ClientInstanceName=\"tx" +
        "tDescription\">\r\n                </dx:ASPxTextBox>\r\n                <dx:ASPxButto" +
        "n ID=\"btnUpload\" runat=\"server\" AutoPostBack=\"False\" Text=\"Upload\" ClientInstanc" +
        "eName=\"btnUpload\"\r\n                    Width=\"100px\" ClientEnabled=\"False\">\r\n   " +
        "                 <ClientSideEvents Click=\"function(s, e) { uploader.Upload(); }\"" +
        " />\r\n                </dx:ASPxButton>\r\n            </dx:PopupControlContentContr" +
        "ol>\r\n        </ContentCollection>\r\n    </dx:ASPxPopupControl>\r\n    <dx:ASPxButto" +
        "n ID=\"btnNewDocument\" runat=\"server\" Text=\"New Document\" AutoPostBack=\"false\">\r\n" +
        "        <ClientSideEvents Click=\"function(s,e){uploadPopup.Show();}\" />\r\n    </d" +
        "x:ASPxButton>\r\n    </p>\r\n    <dx:ASPxGridView ID=\"gvFiles\" runat=\"server\" AutoGe" +
        "nerateColumns=\"False\" ClientInstanceName=\"grid\"\r\n        DataSourceID=\"FileDataS" +
        "ource\" KeyFieldName=\"FileGUID\">\r\n        <Columns>\r\n            <dx:GridViewComm" +
        "andColumn VisibleIndex=\"0\">\r\n                <ClearFilterButton Visible=\"True\">\r" +
        "\n                </ClearFilterButton>\r\n                <CustomButtons>\r\n        " +
        "            <dx:GridViewCommandColumnCustomButton ID=\"Delete\" Text=\"Delete\"></dx" +
        ":GridViewCommandColumnCustomButton>\r\n                    <dx:GridViewCommandColu" +
        "mnCustomButton ID=\"Download\" Text=\"Download\"></dx:GridViewCommandColumnCustomBut" +
        "ton>\r\n                </CustomButtons>\r\n            </dx:GridViewCommandColumn>\r" +
        "\n            <dx:GridViewDataTextColumn FieldName=\"ProjectFileID\" Visible=\"False" +
        "\" \r\n                VisibleIndex=\"1\">\r\n            </dx:GridViewDataTextColumn>\r" +
        "\n            <dx:GridViewDataTextColumn FieldName=\"FileGUID\" ReadOnly=\"True\" Vis" +
        "ible=\"False\" \r\n                VisibleIndex=\"2\">\r\n            </dx:GridViewDataT" +
        "extColumn>\r\n            <dx:GridViewDataTextColumn FieldName=\"FileName\" VisibleI" +
        "ndex=\"3\">\r\n            </dx:GridViewDataTextColumn>\r\n            <dx:GridViewDat" +
        "aTextColumn FieldName=\"FileDescription\" VisibleIndex=\"4\">\r\n            </dx:Grid" +
        "ViewDataTextColumn>\r\n            <dx:GridViewDataTextColumn FieldName=\"CreatedBy" +
        "\" VisibleIndex=\"8\">\r\n            </dx:GridViewDataTextColumn>\r\n            <dx:G" +
        "ridViewDataDateColumn FieldName=\"CreatedDate\" VisibleIndex=\"7\">\r\n            </d" +
        "x:GridViewDataDateColumn>\r\n            <dx:GridViewDataTextColumn FieldName=\"Mod" +
        "ifiedBy\" VisibleIndex=\"6\">\r\n            </dx:GridViewDataTextColumn>\r\n          " +
        "  <dx:GridViewDataTextColumn FieldName=\"ModifiedDate\" VisibleIndex=\"5\">\r\n       " +
        "     </dx:GridViewDataTextColumn>\r\n        </Columns>\r\n\t\t<ClientSideEvents Custo" +
        "mButtonClick=\"OnCustomButtonClick\" EndCallback=\"OnGridEndCallback\" />\r\n    </dx:" +
        "ASPxGridView>\r\n    <asp:EntityDataSource ID=\"FileDataSource\" runat=\"server\" \r\n  " +
        "      ConnectionString=\"name=SiteVisitMetaEntities\" \r\n        DefaultContainerNa" +
        "me=\"SiteVisitMetaEntities\" EnableFlattening=\"False\" \r\n        EntitySetName=\"Pro" +
        "jectFiles\">\r\n    </asp:EntityDataSource>\r\n</asp:Content>\r\n");

        
        #line default
        #line hidden
        
        #line 136 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

    }  

    void GenerateDocumentCodeFile()
	{

        
        #line default
        #line hidden
        
        #line 141 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"
this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
        "m.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\nusing DevExpress" +
        ".Web.ASPxTreeList;\r\nusing System.IO;\r\nusing DevExpress.Web.Data;\r\nusing DevExpre" +
        "ss.Web.ASPxUploadControl;\r\nusing System.Collections;\r\nusing OnSite.WebUI.Models;" +
        "\r\nusing OnSite.WebUI.Classes;\r\nusing System.Web.Security;\r\nusing DevExpress.Web." +
        "ASPxClasses;\r\n\r\nnamespace OnSite.WebUI.Documents\r\n{\r\n    public partial class De" +
        "fault : System.Web.UI.Page\r\n    {\r\n       const string UploadDirectory = \"~/Uplo" +
        "ads/\";\r\n        private SiteVisitMetaEntities ctx = new SiteVisitMetaEntities();" +
        "\r\n        private string gvFilesErrorMessage = \"\";\r\n\r\n        protected void Pag" +
        "e_Load(object sender, EventArgs e)\r\n        {\r\n            gvFiles.CustomButtonC" +
        "allback += new DevExpress.Web.ASPxGridView.ASPxGridViewCustomButtonCallbackEvent" +
        "Handler(gvFiles_CustomButtonCallback);\r\n            gvFiles.CustomCallback += ne" +
        "w DevExpress.Web.ASPxGridView.ASPxGridViewCustomCallbackEventHandler(gvFiles_Cus" +
        "tomCallback);\r\n            gvFiles.CustomJSProperties += new DevExpress.Web.ASPx" +
        "GridView.ASPxGridViewClientJSPropertiesEventHandler(gvFiles_CustomJSProperties);" +
        "\r\n        }\r\n\r\n        protected void gvFiles_CustomJSProperties(object sender, " +
        "DevExpress.Web.ASPxGridView.ASPxGridViewClientJSPropertiesEventArgs e)\r\n        " +
        "{\r\n            e.Properties.Add(\"cpErrorMessage\", gvFilesErrorMessage);\r\n       " +
        " }\r\n\r\n        protected void gvFiles_CustomCallback(object sender, DevExpress.We" +
        "b.ASPxGridView.ASPxGridViewCustomCallbackEventArgs e)\r\n        {\r\n            if" +
        " (e.Parameters.Length > 0)\r\n            {\r\n                string[] parameters =" +
        " e.Parameters.Split(new char[]{\'|\'});\r\n                string filename = paramet" +
        "ers[0];\r\n                string description = parameters[1];\r\n\r\n\t\t\t\tif (filename" +
        ".Contains(\"\\\\\"))\r\n                {\r\n                    //get the filename by i" +
        "tself\r\n                    int l = filename.LastIndexOf(\"\\\\\")+1;\r\n              " +
        "      filename = filename.Substring(l, filename.Length - l);\r\n                }\r" +
        "\n\r\n                var file = (from f in ctx.ProjectFiles\r\n                     " +
        "       where f.FileName == filename\r\n                            select f).First" +
        "OrDefault();\r\n                if (file != null)\r\n                {\r\n            " +
        "        file.FileDescription = description;\r\n                    ctx.SaveChanges" +
        "();\r\n\r\n                    string fileLength = file.FileContents.Length / 1024 +" +
        " \"kb\";\r\n                    gvFilesErrorMessage = string.Format(\"Successfully up" +
        "loaded {0} ({1}).\", file.FileName, fileLength);                    \r\n           " +
        "     }\r\n            }\r\n            gvFiles.DataBind();\r\n        }\r\n\r\n        pro" +
        "tected void gvFiles_CustomButtonCallback(object sender, DevExpress.Web.ASPxGridV" +
        "iew.ASPxGridViewCustomButtonCallbackEventArgs e)\r\n        {\r\n            try\r\n  " +
        "          {\r\n                if (e.ButtonID == \"Download\")\r\n                {\r\n " +
        "                   if (PermissionHelper.Documents.CanDownload())\r\n              " +
        "      {\r\n                        string fileguid = gvFiles.GetRowValues(e.Visibl" +
        "eIndex, \"FileGUID\").ToString();\r\n                        ASPxWebControl.Redirect" +
        "OnCallback(\"GetFile.aspx?f=\" + fileguid);\r\n                    }\r\n              " +
        "      else\r\n                    {\r\n                        throw new Exception(P" +
        "ermissionHelper.Documents.DownloadDeniedMessage);\r\n                    }\r\n      " +
        "          }\r\n                else\r\n                {\r\n                    Guid f" +
        "ileguid = (Guid)gvFiles.GetRowValues(e.VisibleIndex, \"FileGUID\");\r\n             " +
        "       ProjectFile file = (from f in ctx.ProjectFiles\r\n                         " +
        "               where f.FileGUID == fileguid\r\n                                   " +
        "     select f).FirstOrDefault();\r\n                    if (file != null)\r\n       " +
        "             {\r\n                        if (PermissionHelper.Documents.CanDelete" +
        "(file.CreatedBy))\r\n                        {\r\n                            ctx.Pr" +
        "ojectFiles.DeleteObject(file);\r\n                            ctx.SaveChanges();\r\n" +
        "                        }\r\n                        else\r\n                       " +
        " {\r\n                            throw new Exception(PermissionHelper.Documents.D" +
        "eleteDeniedMessage);\r\n                        }\r\n                    }\r\n        " +
        "        }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n     " +
        "           gvFilesErrorMessage = ex.Message;\r\n                \r\n            }\r\n " +
        "           gvFiles.DataBind();\r\n        }\r\n\r\n        protected void uploader_Fil" +
        "eUploadComplete(object sender, FileUploadCompleteEventArgs e)\r\n        {\r\n      " +
        "      e.CallbackData = SavePostedFile(e.UploadedFile);\r\n        }\r\n\r\n        pro" +
        "tected string SavePostedFile(UploadedFile uploadedFile)\r\n        {\r\n            " +
        "if (!uploadedFile.IsValid)\r\n                return string.Empty;\r\n\r\n\r\n          " +
        "  var file = (from f in ctx.ProjectFiles\r\n                        where f.FileNa" +
        "me == uploadedFile.FileName\r\n                        select f).FirstOrDefault();" +
        "\r\n            string returnMessage = \"\";\r\n\r\n            try\r\n            {\r\n    " +
        "            if (file == null)\r\n                {\r\n                    if (Permis" +
        "sionHelper.Documents.CanUpload())\r\n                    {\r\n\r\n                    " +
        "    //TODO: come up with a better way to select projectID (actually better way t" +
        "o deal with projects.!)\r\n                        int projectID = (from p in ctx." +
        "Projects\r\n                                         select p.ProjectID).FirstOrDe" +
        "fault();\r\n\r\n                        ProjectFile newFile = new ProjectFile();\r\n  " +
        "                      newFile.ProjectID = projectID;\r\n                        ne" +
        "wFile.FileGUID = Guid.NewGuid();\r\n                        newFile.FileContents =" +
        " ReadFully(uploadedFile.FileContent); //System.IO.File.ReadAllBytes(resFileName)" +
        ";\r\n                        newFile.FileName = uploadedFile.FileName;\r\n          " +
        "              newFile.FileType = uploadedFile.ContentType;\r\n                    " +
        "    string currentuser = Membership.GetUser().UserName;\r\n                       " +
        " newFile.CreatedBy = currentuser;\r\n                        newFile.ModifiedBy = " +
        "currentuser;\r\n                        newFile.CreatedDate = DateTime.Now;\r\n     " +
        "                   newFile.ModifiedDate = DateTime.Now;\r\n                       " +
        " ctx.AddObject(\"ProjectFiles\", newFile);\r\n                        ctx.SaveChange" +
        "s();\r\n                    }\r\n                    else\r\n                    {\r\n  " +
        "                      throw new Exception(PermissionHelper.Documents.UploadDenie" +
        "dMessage);\r\n                    }\r\n                }\r\n                else\r\n    " +
        "            {\r\n                    if (PermissionHelper.Documents.CanOverwrite(f" +
        "ile.CreatedBy))\r\n                    {\r\n                        //save file cont" +
        "ents over the top of the existing file\r\n                        file.FileContent" +
        "s = ReadFully(uploadedFile.FileContent);\r\n                        file.FileType " +
        "= uploadedFile.ContentType;\r\n                        file.ModifiedBy = Membershi" +
        "p.GetUser().UserName;\r\n                        file.ModifiedDate = DateTime.Now;" +
        "\r\n                        ctx.SaveChanges();\r\n                    }\r\n           " +
        "         else\r\n                    {\r\n                        throw new Exceptio" +
        "n(PermissionHelper.Documents.OverwriteDeniedMessage);\r\n                    }\r\n  " +
        "              }\r\n            }\r\n            catch (Exception ex)\r\n            {\r" +
        "\n                returnMessage = ex.Message;\r\n            }\r\n\r\n            retur" +
        "n returnMessage;\r\n        }\r\n\r\n        public byte[] ReadFully(Stream input)\r\n  " +
        "      {\r\n            byte[] buffer = new byte[input.Length];\r\n            //byte" +
        "[] buffer = new byte[16 * 1024];\r\n            using (MemoryStream ms = new Memor" +
        "yStream())\r\n            {\r\n                int read;\r\n                while ((re" +
        "ad = input.Read(buffer, 0, buffer.Length)) > 0)\r\n                {\r\n            " +
        "        ms.Write(buffer, 0, read);\r\n                }\r\n                return ms" +
        ".ToArray();\r\n            }\r\n        }\r\n    }\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 339 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

    }

	void GenerateDocumentDesignerFile()
	{

        
        #line default
        #line hidden
        
        #line 344 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"
this.Write("//------------------------------------------------------------------------------\r" +
        "\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Chan" +
        "ges to this file may cause incorrect behavior and will be lost if\r\n//     the co" +
        "de is regenerated. \r\n// </auto-generated>\r\n//-----------------------------------" +
        "-------------------------------------------\r\n\r\nnamespace OnSite.WebUI.Documents " +
        "{\r\n    \r\n    \r\n    public partial class Default {\r\n\t\t/// <summary>\r\n        /// " +
        "pcUpload control.\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// Au" +
        "to-generated field.\r\n        /// To modify move field declaration from designer " +
        "file to code-behind file.\r\n        /// </remarks>\r\n        protected global::Dev" +
        "Express.Web.ASPxPopupControl.ASPxPopupControl pcUpload;\r\n        \r\n        /// <" +
        "summary>\r\n        /// uplFile control.\r\n        /// </summary>\r\n        /// <rem" +
        "arks>\r\n        /// Auto-generated field.\r\n        /// To modify move field decla" +
        "ration from designer file to code-behind file.\r\n        /// </remarks>\r\n        " +
        "protected global::DevExpress.Web.ASPxUploadControl.ASPxUploadControl uplFile;\r\n " +
        "       \r\n        /// <summary>\r\n        /// mDescription control.\r\n        /// <" +
        "/summary>\r\n        /// <remarks>\r\n        /// Auto-generated field.\r\n        ///" +
        " To modify move field declaration from designer file to code-behind file.\r\n     " +
        "   /// </remarks>\r\n        protected global::DevExpress.Web.ASPxEditors.ASPxText" +
        "Box mDescription;\r\n        \r\n        /// <summary>\r\n        /// btnUpload contro" +
        "l.\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// Auto-generated fi" +
        "eld.\r\n        /// To modify move field declaration from designer file to code-be" +
        "hind file.\r\n        /// </remarks>\r\n        protected global::DevExpress.Web.ASP" +
        "xEditors.ASPxButton btnUpload;\r\n        \r\n        /// <summary>\r\n        /// btn" +
        "NewDocument control.\r\n        /// </summary>\r\n        /// <remarks>\r\n        ///" +
        " Auto-generated field.\r\n        /// To modify move field declaration from design" +
        "er file to code-behind file.\r\n        /// </remarks>\r\n        protected global::" +
        "DevExpress.Web.ASPxEditors.ASPxButton btnNewDocument;\r\n        \r\n        /// <su" +
        "mmary>\r\n        /// gvFiles control.\r\n        /// </summary>\r\n        /// <remar" +
        "ks>\r\n        /// Auto-generated field.\r\n        /// To modify move field declara" +
        "tion from designer file to code-behind file.\r\n        /// </remarks>\r\n        pr" +
        "otected global::DevExpress.Web.ASPxGridView.ASPxGridView gvFiles;\r\n        \r\n   " +
        "     /// <summary>\r\n        /// Delete control.\r\n        /// </summary>\r\n       " +
        " /// <remarks>\r\n        /// Auto-generated field.\r\n        /// To modify move fi" +
        "eld declaration from designer file to code-behind file.\r\n        /// </remarks>\r" +
        "\n        protected global::DevExpress.Web.ASPxGridView.GridViewCommandColumnCust" +
        "omButton Delete;\r\n        \r\n        /// <summary>\r\n        /// Download control." +
        "\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// Auto-generated fiel" +
        "d.\r\n        /// To modify move field declaration from designer file to code-behi" +
        "nd file.\r\n        /// </remarks>\r\n        protected global::DevExpress.Web.ASPxG" +
        "ridView.GridViewCommandColumnCustomButton Download;\r\n        \r\n        /// <summ" +
        "ary>\r\n        /// FileDataSource control.\r\n        /// </summary>\r\n        /// <" +
        "remarks>\r\n        /// Auto-generated field.\r\n        /// To modify move field de" +
        "claration from designer file to code-behind file.\r\n        /// </remarks>\r\n     " +
        "   protected global::System.Web.UI.WebControls.EntityDataSource FileDataSource;\r" +
        "\n\t}\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 440 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

	}
	void GenerateGetFilePage()
	{

        
        #line default
        #line hidden
        
        #line 444 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"
this.Write(@"<%@ Page Language=""C#"" AutoEventWireup=""true"" CodeBehind=""GetFile.aspx.cs"" Inherits=""OnSite.WebUI.Documents.GetFile"" %>
<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
<html xmlns=""http://www.w3.org/1999/xhtml"">
<head runat=""server"">
    <title></title>
</head>
<body>
    <form id=""form1"" runat=""server"">
    <div>
		No Data
    </div>
    </form>
</body>
</html>
");

        
        #line default
        #line hidden
        
        #line 459 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

    }  

    void GenerateGetFileCodeFile()
	{

        
        #line default
        #line hidden
        
        #line 464 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"
this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
        "m.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\nusing OnSite.Web" +
        "UI.Models;\r\nusing System.IO;\r\n\r\nnamespace OnSite.WebUI.Documents\r\n{\r\n    public " +
        "partial class GetFile : System.Web.UI.Page\r\n    {\r\n        SiteVisitMetaEntities" +
        " ctx = new SiteVisitMetaEntities();\r\n\r\n        protected void Page_Load(object s" +
        "ender, EventArgs e)\r\n        {\r\n            Guid fileguid;\r\n            Guid.Try" +
        "Parse(Request.Params[0], out fileguid);\r\n            \r\n            ProjectFile f" +
        "ile = (from f in ctx.ProjectFiles\r\n                                where f.FileG" +
        "UID == fileguid\r\n                                select f).FirstOrDefault();\r\n  " +
        "          if (file != null)\r\n            {\r\n                using (Stream st = n" +
        "ew MemoryStream(file.FileContents))\r\n                {\r\n                    long" +
        " dataLengthToRead = st.Length;\r\n                    Response.ContentType = file." +
        "FileType;\r\n                    Response.AddHeader(\"Content-Disposition\", \"attach" +
        "ment; filename=\\\"\" + file.FileName + \"\\\"\");\r\n                    byte[] buffer =" +
        " new byte[1024];\r\n                    int blockSize = 100;\r\n\r\n                  " +
        "  while (dataLengthToRead > 0 && Response.IsClientConnected)\r\n                  " +
        "  {\r\n                        Int32 lengthRead = st.Read(buffer, 0, blockSize);\r\n" +
        "                        Response.OutputStream.Write(buffer, 0, lengthRead);\r\n   " +
        "                     Response.Flush();\r\n                        dataLengthToRead" +
        " = dataLengthToRead - lengthRead;\r\n                    }\r\n                    Re" +
        "sponse.Flush();\r\n                    Response.Close();\r\n                }\r\n     " +
        "           Response.End();\r\n            }\r\n        }\r\n    }\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 513 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

    }

	void GenerateGetFileDesignerFile()
	{

        
        #line default
        #line hidden
        
        #line 518 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"
this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnSite.WebUI.Documents {   
    
    public partial class Default {
        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
	}
}
");

        
        #line default
        #line hidden
        
        #line 541 "C:\Apps\On-Site\Admin\OnSite.TemplateWizard\T4\DocumentsTemplate.tt"

	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class DocumentsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
