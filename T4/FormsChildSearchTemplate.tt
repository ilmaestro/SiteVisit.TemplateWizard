<#@ include file="includes.txt" #>
<#
switch (OutputType) {
	case FileType.Page:
		GeneratePage(SiteVisitForm);
		break;
	case FileType.Code:
		GenerateCodeFile(SiteVisitForm);
		break;
	case FileType.Designer:
		GenerateDesignerFile(SiteVisitForm);
		break;
	default:
		break;
}
#><#+
    void GeneratePage(SiteVisitForm form)
    {
		string siteVisitName = StringSanitizer.SanitizeForCode(form.SiteVisit.SiteVisitName);
		string formName = siteVisitName;
		var parentForm = form.SiteVisitForm1;
		string table = siteVisitName + "_" + form.DBTableName;
        string pkey = siteVisitName + "_" + form.DBPrimaryKeyName;
		string ftable = siteVisitName + "_" + parentForm.DBTableName;
		string fkey = siteVisitName + "_" + parentForm.DBPrimaryKeyName;
#>
<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="<#= form.DBTableName #>Search.ascx.cs" Inherits="OnSite.WebUI.ClientCode.UserControls.<#= form.DBTableName #>Search" %>
<%@ Register Assembly="DevExpress.Web.ASPxGridView.v12.1.Export, Version=12.1.8.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a"
    Namespace="DevExpress.Web.ASPxGridView.Export" TagPrefix="dx" %>

<asp:HiddenField ID="hf<#= form.DBTableName #>FormKey" runat="server" />
<div class="formGroupFieldLabel"><#= form.UIDisplayName #></div>
<table>
    <tr>
        <td>
            <dx:ASPxButton ID="btnCreate" runat="server" Text="Add New Row" Image-Url="~/Images/add.png" AutoPostBack="false">
            </dx:ASPxButton>
        </td>
        <td>
            <dx:ASPxButton ID="btnRefresh" runat="server" Text="Refresh" AutoPostBack="false" Image-Url="~/Images/arrow_refresh.png">
                <ClientSideEvents Click="function(s,e){gv<#= form.DBTableName #>.PerformCallback();}" />
            </dx:ASPxButton>
        </td><%--
		<td>
			<dx:ASPxButton ID="btnCsvExport" runat="server" Text="Export to Csv" UseSubmitBehavior="False" />
		</td>--%>
    </tr>
</table>

<dx:ASPxGridView ID="gv<#= form.DBTableName #>" runat="server" AutoGenerateColumns="False" ClientInstanceName="gv<#= form.DBTableName #>" 
    DataSourceID="<#= form.DBTableName #>DataSource" KeyFieldName="<#= pkey #>">
    <Columns>
        <dx:GridViewCommandColumn VisibleIndex="0">
            <CustomButtons>
                <dx:GridViewCommandColumnCustomButton ID="Edit" Text="Edit"></dx:GridViewCommandColumnCustomButton>
                <dx:GridViewCommandColumnCustomButton ID="Delete" Text="Delete"></dx:GridViewCommandColumnCustomButton>
            </CustomButtons>
            <ClearFilterButton Visible="True">
            </ClearFilterButton>
        </dx:GridViewCommandColumn>
        <dx:GridViewDataTextColumn FieldName="<#= pkey #>" Caption="ID" ReadOnly="True" Visible="false" VisibleIndex="0">
        </dx:GridViewDataTextColumn>
        <dx:GridViewDataTextColumn FieldName="<#= fkey #>" Caption="<#= fkey #>" VisibleIndex="1" Visible="false">
        </dx:GridViewDataTextColumn>
		<dx:GridViewDataTextColumn Caption="Row" ReadOnly="True" UnboundType="String" VisibleIndex="2">
            <Settings AllowAutoFilter="False" AllowAutoFilterTextInputTimer="False" 
                AllowDragDrop="False" AllowGroup="False" AllowHeaderFilter="False" 
                AllowSort="False" />
        </dx:GridViewDataTextColumn>
<#= GenerateGridViewColumns(form, 3) #>
    </Columns>
    <Settings ShowFilterRow="True" ShowHeaderFilterButton="true" />
	<SettingsBehavior AllowSelectByRowClick="true" AllowSelectSingleRowOnly="true" />
	<ClientSideEvents RowClick="function(s,e){window.open('<#= form.DBTableName #>Edit.aspx?ID='+gv<#= form.DBTableName #>.GetRowKey(e.visibleIndex));}" CustomButtonClick="function(s,e) {if (e.buttonID == 'Delete'){e.processOnServer = confirm('Are you sure you want to delete this item?');} else {e.processOnServer = false;var id = gv<#= form.DBTableName #>.GetRowKey(e.visibleIndex);window.open('<#= form.DBTableName #>Edit.aspx?ID='+id);} }" />
</dx:ASPxGridView>

<asp:EntityDataSource ID="<#= form.DBTableName #>DataSource" runat="server" 
    ConnectionString="name=SiteVisitDataEntities" 
    DefaultContainerName="SiteVisitDataEntities" EnableDelete="True" 
    EnableFlattening="False" EntitySetName="<#= table #>" 
    EntityTypeFilter="" Select="" Where="it.<#= fkey #> = @<#= fkey #>">
    <WhereParameters>
        <asp:ControlParameter ControlID="hf<#= form.DBTableName #>FormKey" DefaultValue="0" 
            Name="<#= fkey #>" PropertyName="Value" Type="Int16" />
    </WhereParameters>
</asp:EntityDataSource>
 
<dx:ASPxGridViewExporter ID="gridExport" runat="server" GridViewID="gv<#= form.DBTableName #>">
</dx:ASPxGridViewExporter>
<br />
<#+
    } 
	
	private string GenerateGridViewColumns(SiteVisitForm form, int startIndex)
	{
		foreach(SiteVisitFormField field in SiteVisitDBHelper.GetSiteVisitSearchableFields(form)) 
		{
			ControlType.UIType uiType = (ControlType.UIType)Enum.Parse(typeof(ControlType.UIType), field.ControlType.UITypeName);
			string dataItemTemplate = "";
			if (uiType == ControlType.UIType.RadioList)
            {
				dataItemTemplate = "<DataItemTemplate><dx:ASPxLabel ID=\"label\" runat=\"server\" Text=\"<%# GetFieldLabel(Container,&quot;" + field.FieldName + "&quot;) %>\"></dx:ASPxLabel></DataItemTemplate>";
            }
			else if (uiType == ControlType.UIType.Currency)
            {
				//format for currency
				dataItemTemplate = "<PropertiesTextEdit DisplayFormatString=\"c\" />";
            }

#>			<dx:GridViewDataTextColumn FieldName="<#= field.FieldName #>" Caption="<#= field.FieldLabel #>"
                ReadOnly="True" VisibleIndex="<#= startIndex++ #>">
				<#= dataItemTemplate #>
            </dx:GridViewDataTextColumn>
<#+ 
		}
		return "";
	}

    void GenerateCodeFile(SiteVisitForm form)
    {
		string siteVisitName = StringSanitizer.SanitizeForCode(form.SiteVisit.SiteVisitName);
		string formName = siteVisitName;
		var parentForm = form.SiteVisitForm1;
		string table = siteVisitName + "_" + form.DBTableName;
        string pkey = siteVisitName + "_" + form.DBPrimaryKeyName;
		string ftable = siteVisitName + "_" + parentForm.DBTableName;
		string fkey = siteVisitName + "_" + parentForm.DBPrimaryKeyName;
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.Objects;
using DevExpress.Web.ASPxClasses;
using DevExpress.Web.ASPxGridView;
using DevExpress.Web.ASPxEditors;
using OnSite.WebUI.ClientCode.Models;
using OnSite.WebUI.Models;
using OnSite.WebUI.Classes;

namespace OnSite.WebUI.ClientCode.UserControls
{
    public partial class <#= form.DBTableName #>Search : System.Web.UI.UserControl
    {
		SiteVisitDataEntities ctx = new SiteVisitDataEntities();

		#region Unused Properties
		public string OnChangeFunctionName { get; set; }
        public string CheckStateFunctionName { get; set; }
        public bool IsRequired { get; set; }
        public bool IsEnabled { get; set; }
		public string RequiredFieldErrorMessage { get; set; }
		#endregion

		#region Public Methods
        public void BindListControls()
        {
            //nothing to bind.
        }

        public void LoadForm(<#= ftable #> parentForm)
        {
            hf<#= form.DBTableName #>FormKey.Value = parentForm.<#= fkey #>.ToString();
            btnCreate.ClientSideEvents.Click = "function(s,e){window.open('<#= form.DBTableName #>Edit.aspx?PID=" + hf<#= form.DBTableName #>FormKey.Value + "');}";
            gv<#= form.DBTableName #>.DataBind();
        }

        public void SaveForm(int id)
        {
            //nothing to save.
        }
        #endregion

        protected int? getParentKey()
        {
            int? retVal = null;
            if (!string.IsNullOrEmpty(hf<#= form.DBTableName #>FormKey.Value))
                retVal = (int?)int.Parse(hf<#= form.DBTableName #>FormKey.Value);
            return retVal;
        }

        protected void Page_Init(object sender, EventArgs e)
        {
            gv<#= form.DBTableName #>.CustomCallback += new DevExpress.Web.ASPxGridView.ASPxGridViewCustomCallbackEventHandler(gv<#= form.DBTableName #>_CustomCallback);
			gv<#= form.DBTableName #>.CustomButtonCallback += new DevExpress.Web.ASPxGridView.ASPxGridViewCustomButtonCallbackEventHandler(gv<#= form.DBTableName #>_CustomButtonCallback);
			gv<#= form.DBTableName #>.CustomColumnDisplayText += new ASPxGridViewColumnDisplayTextEventHandler(gv<#= form.DBTableName #>_CustomColumnDisplayText);
        }

        protected void gv<#= form.DBTableName #>_CustomCallback(object sender, DevExpress.Web.ASPxGridView.ASPxGridViewCustomCallbackEventArgs e)
        {
            gv<#= form.DBTableName #>.DataBind();
        }

		protected void gv<#= form.DBTableName #>_CustomButtonCallback(object sender, DevExpress.Web.ASPxGridView.ASPxGridViewCustomButtonCallbackEventArgs e)
        {
            if (e.ButtonID == "Delete")
            {
                int id = (int)gv<#= form.DBTableName #>.GetRowValues(e.VisibleIndex, "<#= pkey #>");

                var record = (from b in ctx.<#= table #>
                              where b.<#= pkey #> == id
                              select b).FirstOrDefault();

                ctx.DeleteObject(record);
                ctx.SaveChanges();
                gv<#= form.DBTableName #>.DataBind();
            }
   
        }

		protected void gv<#= form.DBTableName #>_CustomColumnDisplayText(object sender, ASPxGridViewColumnDisplayTextEventArgs e)
        {
            if (e.Column.Caption == "Row")
            {
                e.DisplayText = (e.VisibleRowIndex + 1).ToString();
            }
        }

        protected void btnCsvExport_Click(object sender, EventArgs e)
        {
            gv<#= form.DBTableName #>.Columns["<#= fkey #>"].Visible = true;
            gv<#= form.DBTableName #>.Columns["<#= pkey #>"].Visible = true;

            gv<#= form.DBTableName #>.DataBind();
            gridExport.FileName = "<#= table #>";
            gridExport.WriteCsvToResponse();
        }   

		protected string GetFieldLabel(GridViewDataItemTemplateContainer container, string fieldName)
        {
            int id = (int)gv<#= form.DBTableName #>.GetRowValues(container.VisibleIndex, "<#= pkey #>");
            string fieldValue = (string)gv<#= form.DBTableName #>.GetRowValues(container.VisibleIndex, fieldName);
            string fieldLabel = "";

            var sql = "SELECT VALUE SiteVisitDataModel.Store.ListItemGetFieldLabel('<#= form.DBTableName #>','" + fieldName + "',@FieldItemValue) FROM {1}";
            fieldLabel = ctx.CreateQuery<string>(sql, new ObjectParameter("FieldItemValue", fieldValue)).FirstOrDefault();

            return fieldLabel;
        }
	}
}
<#+
    }


	void GenerateDesignerFile(SiteVisitForm form)
    {
		string sitevisitname = form.SiteVisit.SiteVisitName.Replace(" ", "");
		string formName = form.SiteVisitFormName.Replace(" ", "");
		var parentForm = form.SiteVisitForm1;
		string table = sitevisitname + "_" + form.DBTableName;
        string pkey = sitevisitname + "_" + form.DBPrimaryKeyName;
		string ftable = sitevisitname + "_" + parentForm.DBTableName;
		string fkey = sitevisitname + "_" + parentForm.DBPrimaryKeyName;
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnSite.WebUI.ClientCode.UserControls {
    
    
    public partial class <#= form.DBTableName #>Search {

		/// <summary>
        /// hfLaundyCyclesFormKey control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HiddenField hf<#= form.DBTableName #>FormKey;
        
        /// <summary>
        /// btnCreate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxEditors.ASPxButton btnCreate;
        
        /// <summary>
        /// btnRefresh control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxEditors.ASPxButton btnRefresh;
        
        /// <summary>
        /// gvLaundryCycles control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxGridView.ASPxGridView gv<#= form.DBTableName #>;
        
        /// <summary>
        /// LaundryCyclesDataSource control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.EntityDataSource <#= form.DBTableName #>DataSource;
        
        /// <summary>
        /// gridExport control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxGridView.Export.ASPxGridViewExporter gridExport;

	}
}
<#+
	}
#>