<#@ include file="includes.txt" #>
<#
string className = Form.DBTableName;
switch (OutputType) {
	case FileType.Page:
		GeneratePage(Form);
		break;
	case FileType.Code:
		GenerateCodeFile(className, Form);
		break;
	case FileType.Designer:
		GenerateDesignerFile(className, Form);
		break;
	default:
		break;
}
#><#+
    void GeneratePage(SiteVisitForm form)
    {
		string pkeyTable = form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.DBTableName;
        string pkey = form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.DBPrimaryKeyName;
		string fkey = form.SiteVisitForm1 != null ? form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.SiteVisitForm1.DBPrimaryKeyName : string.Empty;
		string fkeyTable = form.SiteVisitForm1 != null ? form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.SiteVisitForm1.DBTableName : string.Empty;
#>
<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="<#= form.DBTableName #>.ascx.cs" Inherits="OnSite.WebUI.UserControls.GeneratedForms.<#= form.DBTableName #>" %>
<%@ Register Assembly="DevExpress.Web.v12.1, Version=12.1.4.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a"
    Namespace="DevExpress.Web.ASPxHiddenField" TagPrefix="dx" %>
<%@ Register Assembly="DevExpress.Web.ASPxEditors.v12.1, Version=12.1.4.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a"
    Namespace="DevExpress.Web.ASPxEditors" TagPrefix="dx" %>
<%@ Register src="~/UserControls/FormControls/Text.ascx" tagname="Text" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/Number.ascx" tagname="Number" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/Date.ascx" tagname="Date" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/PhoneNumber.ascx" tagname="PhoneNumber" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/RadioList.ascx" tagname="RadioList" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/ZipCode.ascx" tagname="ZipCode" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/Email.ascx" tagname="Email" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/DropdownList.ascx" tagname="DropdownList" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/CheckList.ascx" tagname="CheckList" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/Label.ascx" tagname="Label" tagprefix="uc" %>
<%@ Register src="~/UserControls/FormControls/Memo.ascx" tagname="Memo" tagprefix="uc" %>
<asp:Panel ID="<#= form.DBTableName #>Panel" runat="server">
	<dx:ASPxTextBox ID="hv<#= pkey #>" runat="server" ClientVisible="false"></dx:ASPxTextBox>
	<#= !string.IsNullOrEmpty(fkey) ? "<dx:ASPxTextBox ID=\"hv" + fkey + "\" runat=\"server\" ClientVisible=\"false\"></dx:ASPxTextBox>" : "" #>
	<table class="CheckListTable">
		<tr class="ChecklistHeaderRow">
			<th width="75">&nbsp;</th>
			<th width="250"><#= form.UIDisplayName #></th>
<#= GenerateFieldGroupColumns(form.SiteVisitFormID) #>
		</tr>
<#= GenerateGroups(form.SiteVisitFormID) #>
	</table>
</asp:Panel>
<#+
    }  

	private string GenerateFieldGroupColumns(int siteVisitFormID)
	{
		var groups = SiteVisitDBHelper.GetFieldGroups(siteVisitFormID, null);
		foreach(string grp in groups) {
			string groupName = grp == null ? string.Empty : grp;
#>			<th width="150"><#= groupName #></th>
<#+ 
		}
		return "";
	}

	private string GenerateGroups(int siteVisitFormID)
	{
		var groups = SiteVisitDBHelper.GetSiteVisitFormGroups(siteVisitFormID);
		IList<string> fieldgroups = SiteVisitDBHelper.GetFieldGroups(siteVisitFormID, null);
		foreach(SiteVisitFormGroup grp in groups) {
			string displayName = (grp.SiteVisitFormGroupDisplayName == null ? string.Empty : StringSanitizer.SanitizeForWeb(grp.SiteVisitFormGroupDisplayName));
			string groupName = (grp.SiteVisitFormGroupName == null ? string.Empty : StringSanitizer.SanitizeForWeb(grp.SiteVisitFormGroupName));
			string description = (grp.SiteVisitFormGroupDescription == null ? string.Empty : StringSanitizer.SanitizeForWeb(grp.SiteVisitFormGroupDescription));
			string colspan = "";
			if (groupName != displayName && groupName.Length > 0)
			{
				groupName = "<br /><span style=\"color: LightGrey;\">["+groupName+"]</span>";
			} else if (groupName == displayName) {
				groupName = "";
			}
			if (string.IsNullOrEmpty(description))
			{
				colspan = "colspan=\"2\""; //for cases where no description is provided.
			} else {
				description = "<td valign=\"top\" class=\"CheckListGroupDescription\">"+description+"</td>";
			}
#>		<tr>
			<td valign="top" class="CheckListGroupDisplay" <#= colspan #>><#= displayName #><#= groupName #></td>    
			<#= description #>
<#= GenerateFieldGroups(grp.SiteVisitFormGroupID, fieldgroups) #>			
		</tr>
<#+ 
		}
		return "";
	}
	
	private string GenerateFieldGroups(int siteVisitGroupID, IList<string> fieldgroups)
	{
		foreach(string fieldGroupName in fieldgroups) {
#>			<td valign="top" class="CheckListFieldGroup">
<#= GenerateGroupFields(siteVisitGroupID, fieldGroupName) #>
			</td>			
<#+ 
		}
		return "";
	}

	private string GenerateGroupFields(int siteVisitGroupID, string fieldGroupName)
	{
		var fields = SiteVisitDBHelper.GetSiteVisitFormFieldsByFieldGroup(siteVisitGroupID, fieldGroupName);
		
		foreach(SiteVisitFormField field in fields) {
			string label = "";
			string fieldLabel = string.IsNullOrEmpty(field.FieldLabel) ? string.Empty : StringSanitizer.SanitizeForWeb(field.FieldLabel);
			string IsVisible = field.IsVisible ? "True" : "False";
			string IsRequired = field.IsRequired ? "True" : "False";
			string RequiredFieldErrorMessage = field.FieldLabel + " is required.";
			if (field.IsLabelVisible && !string.IsNullOrEmpty(fieldLabel))
			{
				label = "<span>"+fieldLabel+"</span>";
			}
			string otherBox = "";
			if (SiteVisitDBHelper.FieldHasListItemOther(field))
			{
				otherBox = "<span>If Other:</span><uc:Text ID=\"uc" + field.FieldName + "_Other\" runat=\"server\"></uc:Text>";
			}
#>				<div class="CheckListGroupField">
					<#= label #>
					<uc:<#= field.ControlType.UITypeName #> ID="uc<#= field.FieldName #>" runat="server" 
						Visible="<#= IsVisible #>" 
						IsRequired="<#= IsRequired #>"
						RequiredFieldErrorMessage="<#= RequiredFieldErrorMessage #>"
						<#= string.IsNullOrEmpty(field.ControlAttributes) ? "" : field.ControlAttributes #>>
					</uc:<#= field.ControlType.UITypeName #>>
					<#= otherBox #>
				</div>
<#+ 
		}
		return "";
	}

    void GenerateCodeFile(string className, SiteVisitForm form)
    {
		string table = form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.DBTableName;
        string pkey = form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.DBPrimaryKeyName;
		string fkey = form.SiteVisitForm1 != null ? form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.SiteVisitForm1.DBPrimaryKeyName : string.Empty;
		string fkeyTable = form.SiteVisitForm1 != null ? form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.SiteVisitForm1.DBTableName : string.Empty;
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.Security;
using OnSite.WebUI.Models;

namespace OnSite.WebUI.UserControls.GeneratedForms
{
    public partial class <#= className #> : System.Web.UI.UserControl
    {
        private SiteVisitDataEntities dataCtx = new SiteVisitDataEntities();
        private SiteVisitMetaEntities metaCtx = new SiteVisitMetaEntities();


		#region Public Properties
        public int? <#= pkey #>
        {
            get
            {
                int? <#= pkey #> = null;

                if (!string.IsNullOrEmpty(hv<#= pkey #>.Text))
                {
                    <#= pkey #> = (int?)int.Parse(hv<#= pkey #>.Text);
                }
                return <#= pkey #>;
            }
        }
<#= GetForeignKeyProperty(fkey) #>
<#= GenerateProperties(form.SiteVisitFormID) #>
		#endregion
        
		public void BindListControls()
        {
<#= GenerateBindListControl(form.SiteVisitFormID) #>
        }
<#= GetForeignKeyLoadForm(table, fkeyTable) #>

        public void LoadForm(int _<#= pkey #>)
        {
            <#= table #> formdata = (from f in dataCtx.<#= table #>
								   where f.<#= pkey #> == _<#= pkey #>
								   select f).SingleOrDefault();
            if (formdata != null)
            {
				PopulateForm(formdata);
            }
        }

		public <#= table #> GetFormData(int _<#= pkey #>)
        {
            <#= table #> formdata = (from f in dataCtx.<#= table #>
								   where f.<#= pkey #> == _<#= pkey #>
								   select f).SingleOrDefault();
            return formdata;
        }

		public void PopulateForm(<#= table #> formdata)
        {
            hv<#= pkey #>.Text = formdata.<#= pkey #>.ToString();
<#= GenerateLoadFields(form.SiteVisitFormID) #>
		}

        public void SaveForm(<#= !string.IsNullOrEmpty(fkey) ? "int " + fkey : ""#>)
        {
            <#= table #> formdata;

            if (<#= pkey #> != null)
            {
                formdata = (from f in dataCtx.<#= table #>
                            where f.<#= pkey #> == <#= pkey #>
                            select f).SingleOrDefault();
            }
            else
            {
                formdata = new <#= table #>();
            }
			
			<#= !string.IsNullOrEmpty(fkey) ? "formdata." + fkey + " = " + fkey + "; //foreign key" : ""#>
<#= GenerateSaveFields(form.SiteVisitFormID) #>
			formdata.ModifiedDate = DateTime.Now;
            formdata.ModifiedUser = Membership.GetUser().UserName;

            if (<#= pkey #> != null)
            {
                dataCtx.ObjectStateManager.ChangeObjectState(formdata, System.Data.EntityState.Modified);
            }
            else
            {
				<#= string.IsNullOrEmpty(fkey) ? "formdata.DispositionID = " + SiteVisitDBHelper.GetDefaultDisposition().ToString() +"; //DEFAULT disposition ID for primary table" : ""#>
                formdata.CreateDate = DateTime.Now;
                formdata.CreateUser = Membership.GetUser().UserName;
                dataCtx.<#= table #>.AddObject(formdata);
            }

            dataCtx.SaveChanges().ToString();
			hv<#= pkey #>.Text = formdata.<#= pkey #>.ToString();
			<#= string.IsNullOrEmpty(fkey) ? "dataCtx."+ table + "UpdateGeography();" : "" #>
        }
    }
}
<#+
    }

	private string GetForeignKeyProperty(string fkey)
	{		
		if (!string.IsNullOrEmpty(fkey))
		{
#>
        public int? <#= fkey #>
        {
            get
            {
                int? <#= fkey #> = null;

                if (!string.IsNullOrEmpty(hv<#= fkey #>.Text))
                {
                    <#= fkey #> = (int?)int.Parse(hv<#= fkey #>.Text);
                }
                return <#= fkey #>;
            }
        }
<#+
		}
		return "";
	}
	
	private string GetForeignKeyLoadForm(string pkeyTable, string fkeyTable)
	{		
		if (!string.IsNullOrEmpty(pkeyTable) && !string.IsNullOrEmpty(fkeyTable))
		{
#>		public void LoadForm(<#= fkeyTable #> parentForm)
        {
			<#= pkeyTable #> formdata = parentForm.<#= pkeyTable #>.FirstOrDefault();
            if (formdata != null)
            {                
                PopulateForm(formdata);
            }
        }
<#+
		}
		return "";
	}
	private string GenerateProperties(int siteVisitFormID)
	{
		var fields = SiteVisitDBHelper.GetSiteVisitFormFields(siteVisitFormID, null, false);

		foreach(SiteVisitFormField field in fields) {
			string otherProperty = "";
			if (SiteVisitDBHelper.FieldHasListItemOther(field))
			{
				otherProperty = "\t\tpublic "+ field.ControlType.CSTypeName+ " " + field.FieldName + "_Other {\r\n";
				otherProperty += "\t\t\tget { return ("+ field.ControlType.CSTypeName+ ") uc" + field.FieldName + "_Other.Value; }\r\n";
				otherProperty += "\t\t\tset { uc" + field.FieldName + "_Other.Value = value;}\r\n";
				otherProperty += "\t\t}\r\n";
			}
#>
        public <#= field.ControlType.CSTypeName #> <#= field.FieldName #> 
		{
			get
			{
				return (<#= field.ControlType.CSTypeName #>) uc<#= field.FieldName #>.Value;
			}
			set
			{
				uc<#= field.FieldName #>.Value = value;
			}
		}
<#= otherProperty #>
<#+ 
		}
		return "";
	}
	private string GenerateBindListControl(int siteVisitFormID)
	{
		var fields = SiteVisitDBHelper.GetSiteVisitFormFields(siteVisitFormID, null, false);

		foreach(SiteVisitFormField field in fields) {
#>
            if (uc<#= field.FieldName #>.IsListControl)
            {
                var datasource = (from m in metaCtx.SiteVisitFormFieldItems
                                  where m.SiteVisitFormFieldID == <#= field.SiteVisitFormFieldID #>
                                  orderby m.ListItemOrder
                                  select m);
                uc<#= field.FieldName #>.BindDataSource(datasource, "ListItemValue", "ListItemLabel", typeof(<#= field.ControlType.CSTypeName #>));
            }
<#+ 
		}
		return "";
	}
	private string GenerateLoadFields(int siteVisitFormID)
	{
		var fields = SiteVisitDBHelper.GetSiteVisitFormFields(siteVisitFormID, null, false);

		foreach(SiteVisitFormField field in fields) {
			string output = "";
			if (field.ControlType.ControlTypeID == 1)
			{
				//grab all the fields list item values
				foreach(SiteVisitFormFieldItem item in field.SiteVisitFormFieldItems)
				{
					output += "if (formdata."+field.FieldName+"_"+item.ListItemValue+" != null) uc" + field.FieldName+ ".SetValue(\""+item.ListItemValue+"\", (bool)formdata."+field.FieldName+"_"+item.ListItemValue+");\r\n\t\t\t";
				}
			} else {
				output = "uc" + field.FieldName+ ".Value = formdata." + field.FieldName + ";";
			}
			if (SiteVisitDBHelper.FieldHasListItemOther(field))
			{
				output += "\r\n\t\t\tuc" + field.FieldName+ "_Other.Value = formdata." + field.FieldName + "_Other;";
			}
#>			<#= output #>
<#+ 
		}
		return "";
	}

	private string GenerateSaveFields(int siteVisitFormID)
	{
		var fields = SiteVisitDBHelper.GetSiteVisitFormFields(siteVisitFormID, null, false);

		foreach(SiteVisitFormField field in fields) {
			string output = "";
			if (field.ControlType.ControlTypeID == 1)
			{
				//grab all the fields list item values
				foreach(SiteVisitFormFieldItem item in field.SiteVisitFormFieldItems)
				{
					output += "formdata." + field.FieldName + "_"+item.ListItemValue+" = uc" + field.FieldName+ ".IsValueSelected(\""+item.ListItemValue+"\");\r\n\t\t\t";
				}
			} else {
				output = "formdata." + field.FieldName + " = (" + field.ControlType.CSTypeName + ") uc" + field.FieldName+ ".Value;";
			}
			if (SiteVisitDBHelper.FieldHasListItemOther(field))
			{
				output += "\r\n\t\t\tformdata." + field.FieldName + "_Other = (" + field.ControlType.CSTypeName + ") uc" + field.FieldName+ "_Other.Value;";
			}
#>			<#= output #>
<#+ 
		}
		return "";
	}

	void GenerateDesignerFile(string className, SiteVisitForm form)
	{
		string pkeyTable = form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.DBTableName;
        string pkey = form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.DBPrimaryKeyName;
		string fkey = form.SiteVisitForm1 != null ? form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.SiteVisitForm1.DBPrimaryKeyName : string.Empty;
		string fkeyTable = form.SiteVisitForm1 != null ? form.SiteVisit.SiteVisitName.Replace(" ", "") + "_" + form.SiteVisitForm1.DBTableName : string.Empty;
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnSite.WebUI.UserControls.GeneratedForms {
    
    
    public partial class <#= className #> {

		/// <summary>
        /// <#= className #>Panel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Panel <#= className #>Panel;

		/// <summary>
        /// HiddenField1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxEditors.ASPxTextBox hv<#= pkey #>;
		<#= !string.IsNullOrEmpty(fkey) ? "protected global::DevExpress.Web.ASPxEditors.ASPxTextBox hv" + fkey + ";" : "" #>
		
<#= GenerateDesignerProperties(form.SiteVisitFormID) #>

	}
}
<#+
	}

	private string GenerateDesignerProperties(int siteVisitFormID)
	{
		var fields = SiteVisitDBHelper.GetSiteVisitFormFields(siteVisitFormID, null, false);

		foreach(SiteVisitFormField field in fields) {
			string otherProperty = "";
			if (SiteVisitDBHelper.FieldHasListItemOther(field))
			{
				otherProperty = "\t\tprotected global::OnSite.WebUI.UserControls.FormControls.Text uc" + field.FieldName + "_Other;\r\n";
			}
#>
        /// <summary>
        /// uc<#= field.FieldName #> control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::OnSite.WebUI.UserControls.FormControls.<#= field.ControlType.UITypeName #> uc<#= field.FieldName #>;
<#= otherProperty #>
<#+ 
		}
		return "";
	}
#>