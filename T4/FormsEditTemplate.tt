<#@ include file="includes.txt" #>
<#
switch (OutputType) {
	case FileType.Page:
		GeneratePage(SiteVisit, SiteVisit.SiteVisitForms);
		break;
	case FileType.Code:
		GenerateCodeFile(SiteVisit, SiteVisit.SiteVisitForms);
		break;
	case FileType.Designer:
		GenerateDesignerFile(SiteVisit, SiteVisit.SiteVisitForms);
		break;
	default:
		break;
}
#><#+
    void GeneratePage(SiteVisit sitevisit, IEnumerable<SiteVisitForm> forms)
    {
		string sitevisitName = sitevisit.SiteVisitName.Replace(" ", "");
		var parentForm = SiteVisitDBHelper.GetParentForm(sitevisit);
		string table = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBTableName;
        string pkey = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBPrimaryKeyName;
#>
<%@ Page Title="<#= sitevisit.SiteVisitName #>" Language="C#" MasterPageFile="~/Site.master" AutoEventWireup="true" CodeBehind="<#= sitevisitName #>Edit.aspx.cs" Inherits="OnSite.WebUI.ClientCode.SiteVisits.<#= sitevisitName #>Edit" %>
<#= GenerateUserControlReferences(parentForm, forms) #>

<asp:Content ID="HeaderContent" runat="server" ContentPlaceHolderID="HeadContent">
<script type="text/javascript">
	function GetParentKey() {
		return hfFormKey.Get("<#= pkey #>");
	}
	function OnCloseClick(s,e) {
		window.close();
	}
	
	function OnCustomButtonClick(s,e) {
		if (e.buttonID == 'Delete'){ 
			e.processOnServer = confirm('Are you sure you want to delete this item?');
		}
	}
</script>
<script type="text/javascript" src="../Scripts/SiteVisitEdit.js"></script>
</asp:Content>
<asp:Content ID="BodyContent" runat="server" ContentPlaceHolderID="MainContent">
	<div class="formsEditHeader">
		<h2>
			<asp:Label ID="lblFormHeader" runat="server" />
		</h2>
	</div>
	<dx:ASPxButton ID="btnClose" runat="server" Text="Close" Image-Url="~/Images/cancel.png" UseSubmitBehavior="False">
		<ClientSideEvents Click="OnCloseClick" />
	</dx:ASPxButton>
    <table>
        <tr>
            <td valign="top" id="NavBarFormNavigation">
                <dx:ASPxNavBar ID="nbFormNavigation" runat="server" Width="254px" ClientInstanceName="nbFormNavigation" AllowSelectItem="true">
                    <Groups>
                        <dx:NavBarGroup Text="Check List">
                            <Items>
								<dx:NavBarItem Text="<#= parentForm.UIDisplayName #>" Name="<#= parentForm.DBTableName #>" Image-Url="~/Images/application_home.png" Selected="true">                        
                                </dx:NavBarItem>
<#= GenerateNavBarItems(parentForm, forms) #>
                            </Items>
                        </dx:NavBarGroup>        
                    </Groups>
					<ClientSideEvents ItemClick="OnNavBarItemClick" Init="OnNavBarInit" />
                </dx:ASPxNavBar>
            </td>
            <td valign="top">
                <dx:ASPxMenu ID="TopMenu" ClientInstanceName="TopMenu" runat="server" EncodeHtml="False" Width="100%" CssClass="TopMenuFormNavigation">
                    <Items>
                        <dx:MenuItem Name="Save" Text="Save" Image-Url="~/Images/disk.png">
                        </dx:MenuItem>
                        <dx:MenuItem Name="Previous" Text="Previous" Image-Url="~/Images/control_rewind.png">
                        </dx:MenuItem>
                        <dx:MenuItem Name="Next" Text="Next" Image-Url="~/Images/control_fastforward.png">
                        </dx:MenuItem>
                    </Items>
                    <ClientSideEvents ItemClick="OnMenuItemClick" Init="OnTopMenuInit" />
                </dx:ASPxMenu>
				<table>
					<tr>
						<td>Disposition:</td>
						<td>
							<dx:ASPxComboBox ID="cbDisposition" runat="server" ValueType="System.Int32" Width="225px" ClientInstanceName="cbDisposition">
								<ClientSideEvents SelectedIndexChanged="function(s,e) { window.setTimeout(function(){cpForms.PerformCallback('Disposition:'+cbDisposition.GetSelectedItem().value);}, 100); }" />
							</dx:ASPxComboBox>
						</td>
					</tr>
				</table>
				<dx:ASPxCallbackPanel ID="cpForms" runat="server" Width="100%" ClientInstanceName="cpForms" EnableAnimation="false" ShowLoadingPanel="true" EnableViewState="true" ViewStateMode="Enabled">
                    <PanelCollection>
                        <dx:PanelContent>
							<dx:ASPxHiddenField ID="hfFormKey" runat="server" ClientInstanceName="hfFormKey"></dx:ASPxHiddenField>
<#= GenerateUserControls(parentForm, forms) #>
                        </dx:PanelContent>
                    </PanelCollection>
					<ClientSideEvents EndCallback="OnFormsCallback" />
                </dx:ASPxCallbackPanel>
                <dx:ASPxMenu ID="BottomMenu" ClientInstanceName="BottomMenu" runat="server" EncodeHtml="False" Width="100%" CssClass="BottomMenuFormNavigation">
                    <Items>
                        <dx:MenuItem Name="Save" Text="Save" Image-Url="~/Images/disk.png">
                        </dx:MenuItem>
                        <dx:MenuItem Name="Previous" Text="Previous" Image-Url="~/Images/control_rewind.png">
                        </dx:MenuItem>
                        <dx:MenuItem Name="Next" Text="Next" Image-Url="~/Images/control_fastforward.png">
                        </dx:MenuItem>
                    </Items>
                    <ClientSideEvents ItemClick="OnMenuItemClick" Init="OnBottomMenuInit" />
                </dx:ASPxMenu>
            </td>
        </tr>
    </table>

</asp:Content>
<#+
    }  

	private string GenerateUserControlReferences(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID || f.SiteVisitFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
			string formName = form.DBTableName;

			var formChildren = from f in forms
                                where f.SiteVisitParentFormID == form.SiteVisitFormID
                                select f;
            if (form.SiteVisitParentFormID != null && (formChildren.Count() > 0 || form.IsMultipleReponse == true))
            {
				formName += "Search";
            }

#><%@ Register src="~/ClientCode/UserControls/<#= formName #>.ascx" tagname="<#= form.DBTableName #>" tagprefix="uc" %>
<#+ 
		}
		return "";
	}
	
	private string GenerateNavBarItems(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID || f.SiteVisitFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) 
		{
#>				                <dx:NavBarItem Text="<#= form.UIDisplayName #>" Name="<#= form.DBTableName #>" Image-Url="~/Images/application_form.png">                        
                                </dx:NavBarItem>
<#+
		}
		return "";
	}
	
	private string GenerateMenuItems(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
#>				                <dx:MenuItem Text="<#= form.UIDisplayName #>" Name="<#= form.DBTableName #>" Image-Url="~/Images/application_form.png">                        
                                </dx:MenuItem>
<#+
		}
		return "";
	}
	private string GenerateUserControls(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID || f.SiteVisitFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
			string visible = form.SiteVisitParentFormID == null ? "True" : "False";
#>						<uc:<#= form.DBTableName #> ID="uc<#= form.DBTableName #>" runat="server" Visible="<#= visible #>" />
<#+
		}
		return "";
	}

    void GenerateCodeFile(SiteVisit sitevisit, IEnumerable<SiteVisitForm> forms)
    {
		string sitevisitName = sitevisit.SiteVisitName.Replace(" ", "");
		var parentForm = SiteVisitDBHelper.GetParentForm(sitevisit);
		string table = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBTableName;
        string pkey = sitevisit.SiteVisitName.Replace(" ", "") + "_" + parentForm.DBPrimaryKeyName;
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using OnSite.WebUI.ClientCode.Models;
using OnSite.WebUI.Models;

namespace OnSite.WebUI.ClientCode.SiteVisits
{
    public partial class <#= sitevisitName #>Edit : System.Web.UI.Page
    {
		SiteVisitDataEntities dataCtx = new SiteVisitDataEntities();

        protected void Page_Load(object sender, EventArgs e)
        {
			cpForms.Callback += new DevExpress.Web.ASPxClasses.CallbackEventHandlerBase(cpForms_Callback);
			
            if (!IsPostBack)
            {
                BindControls();
				cbDisposition.DataSource = dataCtx.Dispositions.OrderBy(d => d.DisplayOrder);
				cbDisposition.TextField = "DispositionName";
				cbDisposition.ValueField = "DispositionID";
				cbDisposition.DataBind();

                if (!string.IsNullOrEmpty(Request["ID"]))
                {
                    var formdata = uc<#= parentForm.DBTableName #>.LoadForm(int.Parse(Request["ID"]));
					cbDisposition.Items.FindByValue(formdata.DispositionID).Selected = true;
					hfFormKey["<#= pkey #>"] = uc<#= parentForm.DBTableName #>.<#= pkey #>;
					string formHeader = ""<#= GenerateSummaryExpression(parentForm) #>;
					Page.Title = formHeader;
					lblFormHeader.Text = formHeader;
                }
                else
                {
                    string formHeader ="New <#= parentForm.UIDisplayName #>";
					Page.Title = formHeader;
					lblFormHeader.Text = formHeader;
                }
            }	
		}

		protected void BindControls()
        {				
<#= GenerateUserControlBinds(parentForm, forms) #>			
		}

        protected int? getParentKey()
        {
			int? retVal = null;
            if (hfFormKey["<#= pkey #>"] != null)
                retVal = (int?) hfFormKey["<#= pkey #>"];
            return retVal;
        }

        protected <#= table #> getParentFormData()
        {
            <#= table #> formdata = null;
            if (getParentKey() != null)
                formdata = uc<#= parentForm.DBTableName #>.GetFormData((int)getParentKey());
            return formdata;
        }

        protected void cpForms_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            if (e.Parameter.StartsWith("Disposition:"))
            {
			    var form = getParentFormData();
				if (form != null)
				{
					form.DispositionID = int.Parse(e.Parameter.Substring(12, e.Parameter.Length-12));
					uc<#= parentForm.DBTableName #>.SaveForm(form);
				}
            }
            else
            {
                string[] forms = e.Parameter.Split('_');
                saveForm(forms[0]);
                if (forms[1].Length > 0)
                {
                    SetNavbarItem(forms[1]);
                }
            }
        }

        private void saveForm(string formName)
        {
            switch (formName)
            {
                case "<#= parentForm.DBTableName #>":
                    uc<#= parentForm.DBTableName #>.SaveForm();
                    hfFormKey["<#= pkey #>"] = uc<#= parentForm.DBTableName #>.<#= pkey #>;
                    break;
<#= GenerateSaveSwitchCases(parentForm, forms) #>
			}
            SetNavbarItem(formName);
        }

        private void SetNavbarItem(string ItemName)
        {
            hideControls();
            switch (ItemName)
            {
                case "<#= parentForm.DBTableName #>":
                    uc<#= parentForm.DBTableName #>.Visible = true;
					if (getParentKey() != null)
						uc<#= parentForm.DBTableName #>.LoadForm((int)getParentKey());
                    break;
<#= GenerateNavBarSwitchStatements(parentForm, forms) #>
                default:
                    break;
            }
        }

        private void hideControls()
        {
<#= GenerateUserControlHides(parentForm, forms) #>
        }
    }
}
<#+
    }
	
	private string GenerateSummaryExpression(SiteVisitForm form)
	{
		foreach(SiteVisitFormField field in SiteVisitDBHelper.GetSiteVisitSummaryFields(form)) {
#> + uc<#= form.DBTableName #>.<#= field.FieldName #> + " "<#+ 
		}
		return "";
	}

	private string GenerateUserControlBinds(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID || f.SiteVisitFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
#>				uc<#= form.DBTableName #>.BindListControls();
<#+ 
		}
		return "";
	}

	private string GenerateClientEnabledCode(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
#>            nbFormNavigation.Items.FindByName("<#= form.DBTableName #>").ClientEnabled = (getParentKey() != null); 
<#+ 
		}
		return "";
	}

	
	private string GenerateSaveSwitchCases(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
#>                case "<#= form.DBTableName #>":
                    if (getParentKey() != null)
                        uc<#= form.DBTableName #>.SaveForm((int)getParentKey());
                    break;
<#+
		}
		return "";
	}
	
	private string GenerateNavBarSwitchStatements(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
#>                case "<#= form.DBTableName #>":
                    uc<#= form.DBTableName #>.Visible = true;
					if (getParentKey() != null)
                        uc<#= form.DBTableName #>.LoadForm(getParentFormData());
                    break;  
<#+ 
		}
		return "";
	}

	private string GenerateUserControlHides(SiteVisitForm parentForm, IEnumerable<SiteVisitForm> forms)
	{
		var query = from f in forms
					where f.SiteVisitParentFormID == parentForm.SiteVisitFormID || f.SiteVisitFormID == parentForm.SiteVisitFormID
					select f;
		foreach(SiteVisitForm form in query) {
#>				uc<#= form.DBTableName #>.Visible = false;       
<#+ 
		}
		return "";
	}

	void GenerateDesignerFile(SiteVisit sitevisit, IEnumerable<SiteVisitForm> forms)
	{
		string sitevisitName = sitevisit.SiteVisitName.Replace(" ", "");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnSite.WebUI.ClientCode.SiteVisits {
    
    
    public partial class <#= sitevisitName #>Edit {

		/// <summary>
        /// lblFormHeader control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
		protected global::System.Web.UI.WebControls.Label lblFormHeader;

		/// <summary>
        /// btnClose control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxEditors.ASPxButton btnClose;

        /// <summary>
        /// nbFormNavigation control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxNavBar.ASPxNavBar nbFormNavigation;
        
        /// <summary>
        /// TopMenu control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxMenu.ASPxMenu TopMenu;
        
        /// <summary>
        /// TopMenu control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxMenu.ASPxMenu BottomMenu;
        
        /// <summary>
        /// cpForms control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxCallbackPanel.ASPxCallbackPanel cpForms;

		/// <summary>
        /// hfFormKey control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxHiddenField.ASPxHiddenField hfFormKey;

		/// <summary>
        /// cbDisposition control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DevExpress.Web.ASPxEditors.ASPxComboBox cbDisposition;

<#= GenerateDesignerProperties(forms) #>

	}
}
<#+
	}

	private string GenerateDesignerProperties(IEnumerable<SiteVisitForm> forms)
	{
		foreach(SiteVisitForm form in forms) {
			string formName = form.DBTableName;

			var formChildren = from f in forms
                                where f.SiteVisitParentFormID == form.SiteVisitFormID
                                select f;
            if (form.SiteVisitParentFormID != null && (formChildren.Count() > 0 || form.IsMultipleReponse == true))
				formName = form.DBTableName + "Search";
#>
        /// <summary>
        /// uc<#= form.DBTableName #> control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::OnSite.WebUI.ClientCode.UserControls.<#= formName #> uc<#= form.DBTableName #>;
<#+ 
		}
		return "";
	}
#>